{"ast":null,"code":"import { httpClient } from \"./../utils/HttpClient\";\nimport { HTTP_STOCK_SUCCESS, HTTP_STOCK_FETCHING, HTTP_STOCK_FAILED, server } from \"../constants\";\n\nconst setStateStockToSuccess = payload => ({\n  type: HTTP_STOCK_SUCCESS,\n  payload: payload\n});\n\nconst setStateStockToFetching = () => ({\n  type: HTTP_STOCK_FETCHING\n});\n\nconst setStateStockToFailed = () => ({\n  type: HTTP_STOCK_FAILED\n});\n\nexport const deleteProduct = id => {\n  return async dispatch => {\n    dispatch(setStateStockToFetching());\n    await httpClient.delete(`${server.PRODUCT_URL}/${id}`);\n    await doGetProducts(dispatch);\n  };\n};\nexport const getProductByKeyword = event => {\n  return dispatch => {\n    var keyword = event.target.value;\n    dispatch(setStateStockToFetching());\n\n    if (keyword !== null && keyword != \"\") {\n      httpClient.get(`${server.PRODUCT_URL}/keyword/${keyword}`).then(result => {\n        dispatch(setStateStockToSuccess(result.data));\n      });\n    } else {\n      doGetProducts(dispatch);\n    }\n  };\n};\nexport const getProducts = () => {\n  return dispatch => {\n    dispatch(setStateStockToFetching());\n    doGetProducts(dispatch);\n  };\n};\n\nconst doGetProducts = async dispatch => {\n  try {\n    let result = await httpClient.get(server.PRODUCT_URL);\n    dispatch(setStateStockToSuccess(result.data));\n  } catch (error) {\n    alert(JSON.stringify(error));\n    dispatch(setStateStockToFailed());\n  }\n};","map":{"version":3,"sources":["/Users/rangsanchipphang/Documents/SourceCode/React/cmstock-react-js/src/actions/stock.action.js"],"names":["httpClient","HTTP_STOCK_SUCCESS","HTTP_STOCK_FETCHING","HTTP_STOCK_FAILED","server","setStateStockToSuccess","payload","type","setStateStockToFetching","setStateStockToFailed","deleteProduct","id","dispatch","delete","PRODUCT_URL","doGetProducts","getProductByKeyword","event","keyword","target","value","get","then","result","data","getProducts","error","alert","JSON","stringify"],"mappings":"AAAA,SAASA,UAAT,QAA2B,uBAA3B;AACA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,iBAHF,EAIEC,MAJF,QAKO,cALP;;AAOA,MAAMC,sBAAsB,GAAGC,OAAO,KAAK;AACzCC,EAAAA,IAAI,EAAEN,kBADmC;AAEzCK,EAAAA,OAAO,EAAEA;AAFgC,CAAL,CAAtC;;AAKA,MAAME,uBAAuB,GAAG,OAAO;AACrCD,EAAAA,IAAI,EAAEL;AAD+B,CAAP,CAAhC;;AAIA,MAAMO,qBAAqB,GAAG,OAAO;AACnCF,EAAAA,IAAI,EAAEJ;AAD6B,CAAP,CAA9B;;AAIA,OAAO,MAAMO,aAAa,GAAGC,EAAE,IAAI;AACjC,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;AACA,UAAMR,UAAU,CAACa,MAAX,CAAmB,GAAET,MAAM,CAACU,WAAY,IAAGH,EAAG,EAA9C,CAAN;AACA,UAAMI,aAAa,CAACH,QAAD,CAAnB;AACD,GAJD;AAKD,CANM;AAOP,OAAO,MAAMI,mBAAmB,GAAGC,KAAK,IAAI;AAC1C,SAAOL,QAAQ,IAAI;AACjB,QAAIM,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA3B;AACAR,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;;AAEA,QAAIU,OAAO,KAAK,IAAZ,IAAoBA,OAAO,IAAI,EAAnC,EAAuC;AACrClB,MAAAA,UAAU,CAACqB,GAAX,CAAgB,GAAEjB,MAAM,CAACU,WAAY,YAAWI,OAAQ,EAAxD,EAA2DI,IAA3D,CAAgEC,MAAM,IAAI;AACxEX,QAAAA,QAAQ,CAACP,sBAAsB,CAACkB,MAAM,CAACC,IAAR,CAAvB,CAAR;AACD,OAFD;AAGD,KAJD,MAIO;AACLT,MAAAA,aAAa,CAACH,QAAD,CAAb;AACD;AACF,GAXD;AAYD,CAbM;AAcP,OAAO,MAAMa,WAAW,GAAG,MAAM;AAC7B,SAAOb,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACJ,uBAAuB,EAAxB,CAAR;AACAO,IAAAA,aAAa,CAACH,QAAD,CAAb;AACD,GAHD;AAID,CALI;;AAML,MAAMG,aAAa,GAAE,MAAOH,QAAP,IAAkB;AACrC,MAAI;AACF,QAAIW,MAAM,GAAE,MAAOvB,UAAU,CAACqB,GAAX,CAAejB,MAAM,CAACU,WAAtB,CAAnB;AACAF,IAAAA,QAAQ,CAACP,sBAAsB,CAACkB,MAAM,CAACC,IAAR,CAAvB,CAAR;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACdC,IAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAD,CAAL;AACAd,IAAAA,QAAQ,CAACH,qBAAqB,EAAtB,CAAR;AACD;AAEF,CATD","sourcesContent":["import { httpClient } from \"./../utils/HttpClient\";\nimport {\n  HTTP_STOCK_SUCCESS,\n  HTTP_STOCK_FETCHING,\n  HTTP_STOCK_FAILED,\n  server\n} from \"../constants\";\n\nconst setStateStockToSuccess = payload => ({\n  type: HTTP_STOCK_SUCCESS,\n  payload: payload\n});\n\nconst setStateStockToFetching = () => ({\n  type: HTTP_STOCK_FETCHING\n});\n\nconst setStateStockToFailed = () => ({\n  type: HTTP_STOCK_FAILED\n});\n\nexport const deleteProduct = id => {\n  return async dispatch => {\n    dispatch(setStateStockToFetching());\n    await httpClient.delete(`${server.PRODUCT_URL}/${id}`)\n    await doGetProducts(dispatch);\n  };\n};\nexport const getProductByKeyword = event => {\n  return dispatch => {\n    var keyword = event.target.value;\n    dispatch(setStateStockToFetching());\n    \n    if (keyword !== null && keyword != \"\") {\n      httpClient.get(`${server.PRODUCT_URL}/keyword/${keyword}`).then(result => {\n        dispatch(setStateStockToSuccess(result.data));\n      });\n    } else {\n      doGetProducts(dispatch);\n    }\n  };\n};\nexport const getProducts = () => {\n    return dispatch => {\n      dispatch(setStateStockToFetching());\n      doGetProducts(dispatch);\n    };\n  };\n  const doGetProducts =async (dispatch)=>{\n    try {\n      let result= await  httpClient.get(server.PRODUCT_URL)\n      dispatch(setStateStockToSuccess(result.data))\n    } catch (error) {\n      alert(JSON.stringify(error))\n      dispatch(setStateStockToFailed())\n    }\n      \n  }"]},"metadata":{},"sourceType":"module"}