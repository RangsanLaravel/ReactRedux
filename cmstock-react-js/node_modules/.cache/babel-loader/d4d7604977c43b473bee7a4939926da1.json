{"ast":null,"code":"import { HTTP_REGISTER_FETCHING, HTTP_REGISTER_SUCCESS, HTTP_REGISTER_FAILED, server, OK } from \"../constants\";\nimport { httpClient } from './../utils/HttpClient';\nexport const setRegisterStateToFetching = () => ({\n  type: HTTP_REGISTER_FETCHING\n});\nexport const setRegisterStateToSuccess = payload => ({\n  type: HTTP_REGISTER_SUCCESS,\n  payload\n});\nexport const setRegisterStateToFailed = () => ({\n  type: HTTP_REGISTER_FAILED\n});\nexport const register = (history, credential) => {\n  return async dispatch => {\n    dispatch(setRegisterStateToFetching());\n\n    try {\n      let result = await httpClient.post(server.REGISTER_URL, credentail);\n\n      if (result.data.rsult == OK) {\n        //success\n        dispatch(setRegisterStateToSuccess(result.data.result));\n        history.goBack();\n      } else {\n        //failed\n        dispatch(setRegisterStateToFailed());\n      }\n    } catch {\n      dispatch(setRegisterStateToFailed());\n    }\n  };\n};","map":{"version":3,"sources":["/Users/rangsanchipphang/Documents/SourceCode/React/cmstock-react-js/src/actions/register.action.js"],"names":["HTTP_REGISTER_FETCHING","HTTP_REGISTER_SUCCESS","HTTP_REGISTER_FAILED","server","OK","httpClient","setRegisterStateToFetching","type","setRegisterStateToSuccess","payload","setRegisterStateToFailed","register","history","credential","dispatch","result","post","REGISTER_URL","credentail","data","rsult","goBack"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,qBAAjC,EAAwDC,oBAAxD,EAA6EC,MAA7E,EAAoFC,EAApF,QAA8F,cAA9F;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,OAAO,MAAMC,0BAA0B,GAAG,OAAO;AAC7CC,EAAAA,IAAI,EAAEP;AADuC,CAAP,CAAnC;AAGP,OAAO,MAAMQ,yBAAyB,GAAIC,OAAD,KAAc;AACnDF,EAAAA,IAAI,EAAEN,qBAD6C;AAEnDQ,EAAAA;AAFmD,CAAd,CAAlC;AAIP,OAAO,MAAMC,wBAAwB,GAAG,OAAO;AAC3CH,EAAAA,IAAI,EAAEL;AADqC,CAAP,CAAjC;AAIP,OAAO,MAAMS,QAAQ,GAAG,CAACC,OAAD,EAASC,UAAT,KAAsB;AAC1C,SAAO,MAAMC,QAAN,IAAgB;AACnBA,IAAAA,QAAQ,CAACR,0BAA0B,EAA3B,CAAR;;AACA,QAAG;AACC,UAAIS,MAAM,GAAE,MAAMV,UAAU,CAACW,IAAX,CAAgBb,MAAM,CAACc,YAAvB,EAAoCC,UAApC,CAAlB;;AACA,UAAGH,MAAM,CAACI,IAAP,CAAYC,KAAZ,IAAoBhB,EAAvB,EAA0B;AACtB;AACAU,QAAAA,QAAQ,CAACN,yBAAyB,CAACO,MAAM,CAACI,IAAP,CAAYJ,MAAb,CAA1B,CAAR;AACAH,QAAAA,OAAO,CAACS,MAAR;AACH,OAJD,MAIK;AACD;AACAP,QAAAA,QAAQ,CAACJ,wBAAwB,EAAzB,CAAR;AACH;AACJ,KAVD,CAWA,MAAK;AACDI,MAAAA,QAAQ,CAACJ,wBAAwB,EAAzB,CAAR;AACH;AACJ,GAhBD;AAiBH,CAlBM","sourcesContent":["import { HTTP_REGISTER_FETCHING, HTTP_REGISTER_SUCCESS, HTTP_REGISTER_FAILED,server,OK } from \"../constants\";\nimport { httpClient } from './../utils/HttpClient';\nexport const setRegisterStateToFetching = () => ({\n    type: HTTP_REGISTER_FETCHING,\n})\nexport const setRegisterStateToSuccess = (payload) => ({\n    type: HTTP_REGISTER_SUCCESS,\n    payload\n})\nexport const setRegisterStateToFailed = () => ({\n    type: HTTP_REGISTER_FAILED,\n})\n\nexport const register = (history,credential)=>{\n    return async dispatch=>{\n        dispatch(setRegisterStateToFetching())\n        try{\n            let result =await httpClient.post(server.REGISTER_URL,credentail)\n            if(result.data.rsult ==OK){\n                //success\n                dispatch(setRegisterStateToSuccess(result.data.result))\n                history.goBack();\n            }else{\n                //failed\n                dispatch(setRegisterStateToFailed())\n            }\n        }\n        catch{\n            dispatch(setRegisterStateToFailed())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}