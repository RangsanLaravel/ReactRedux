{"ast":null,"code":"import axios from 'axios';\nimport join from 'url-join';\nimport { server, apiUrl, NOT_CONNECT_NETWORK, NETWORK_CONNECTION_MESSAGE } from '../constants';\nconst isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//;\naxios.interceptors.request.use(async config => {\n  if (!isAbsoluteURLRegex.test(config.url)) {\n    config.url = join(apiUrl, config.url);\n  }\n\n  config.timeout = 10000; // 10 Second \n\n  return config;\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  debugger;\n  console.log(JSON.stringify(error, undefined, 2));\n\n  if (axios.isCancel(error)) {\n    return Promise.reject(error);\n  } else if (!error.response) {\n    return Promise.reject({\n      code: NOT_CONNECT_NETWORK,\n      message: NETWORK_CONNECTION_MESSAGE\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport const httpClient = axios;","map":{"version":3,"sources":["/Users/rangsanchipphang/Documents/SourceCode/React/cmstock-react-js/src/utils/HttpClient.js"],"names":["axios","join","server","apiUrl","NOT_CONNECT_NETWORK","NETWORK_CONNECTION_MESSAGE","isAbsoluteURLRegex","interceptors","request","use","config","test","url","timeout","response","error","console","log","JSON","stringify","undefined","isCancel","Promise","reject","code","message","httpClient"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,UAAjB;AACA,SAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,mBAAxB,EAA6CC,0BAA7C,QAA8E,cAA9E;AAEA,MAAMC,kBAAkB,GAAG,eAA3B;AAEAN,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,MAAOC,MAAP,IAAkB;AAC7C,MAAI,CAACJ,kBAAkB,CAACK,IAAnB,CAAwBD,MAAM,CAACE,GAA/B,CAAL,EAA0C;AACtCF,IAAAA,MAAM,CAACE,GAAP,GAAaX,IAAI,CAACE,MAAD,EAASO,MAAM,CAACE,GAAhB,CAAjB;AACH;;AACDF,EAAAA,MAAM,CAACG,OAAP,GAAiB,KAAjB,CAJ6C,CAItB;;AACvB,SAAOH,MAAP;AACH,CAND;AAQAV,KAAK,CAACO,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAAiCK,QAAD,IAAc;AAC1C,SAAOA,QAAP;AACH,CAFD,EAEGC,KAAK,IAAI;AACR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAf,EAAsBK,SAAtB,EAAiC,CAAjC,CAAZ;;AACA,MAAIpB,KAAK,CAACqB,QAAN,CAAeN,KAAf,CAAJ,EAA2B;AACvB,WAAOO,OAAO,CAACC,MAAR,CAAeR,KAAf,CAAP;AACH,GAFD,MAEO,IAAI,CAACA,KAAK,CAACD,QAAX,EAAqB;AACxB,WAAOQ,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,IAAI,EAAEpB,mBAAR;AAA6BqB,MAAAA,OAAO,EAAEpB;AAAtC,KAAf,CAAP;AACH;;AACD,SAAOiB,OAAO,CAACC,MAAR,CAAeR,KAAf,CAAP;AACH,CAXD;AAaA,OAAO,MAAMW,UAAU,GAAG1B,KAAnB","sourcesContent":["import axios from 'axios'\nimport join from 'url-join'\nimport {server, apiUrl, NOT_CONNECT_NETWORK, NETWORK_CONNECTION_MESSAGE} from '../constants'\n\nconst isAbsoluteURLRegex = /^(?:\\w+:)\\/\\//\n\naxios.interceptors.request.use(async (config) => {\n    if (!isAbsoluteURLRegex.test(config.url)) {\n        config.url = join(apiUrl, config.url) \n    }\n    config.timeout = 10000 // 10 Second \n    return config\n})\n\naxios.interceptors.response.use((response) => {\n    return response\n}, error => { \n    debugger\n    console.log(JSON.stringify(error, undefined, 2))\n    if (axios.isCancel(error)) {\n        return Promise.reject(error)\n    } else if (!error.response) {\n        return Promise.reject({ code: NOT_CONNECT_NETWORK, message: NETWORK_CONNECTION_MESSAGE })\n    }\n    return Promise.reject(error)\n})\n\nexport const httpClient = axios\n"]},"metadata":{},"sourceType":"module"}