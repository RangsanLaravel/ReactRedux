{"ast":null,"code":"import { HTTP_LOGIN_FETCHING, HTTP_LOGIN_SUCCESS, HTTP_LOGIN_FAILED, server, OK } from \"../constants\";\nimport { httpClient } from './../utils/HttpClient';\nexport const setLoginStateToFetching = () => ({\n  type: HTTP_LOGIN_FETCHING\n});\nexport const setLoginStateToSuccess = payload => ({\n  type: HTTP_LOGIN_SUCCESS,\n  payload\n});\nexport const setLoginStateToFailed = () => ({\n  type: HTTP_LOGIN_FAILED\n});\nexport const login = (history, credentail) => {\n  return async dispatch => {\n    dispatch(setLoginStateToFetching());\n\n    try {\n      let result = await httpClient.post(server.LOGIN_URL, credentail);\n\n      if (result.data.rsult == OK) {\n        //success\n        localStorage.setItem();\n        dispatch(setLoginStateToSuccess(result.data.result));\n        history.goBack();\n      } else {\n        //failed\n        dispatch(setLoginStateToFailed());\n      }\n    } catch {\n      dispatch(setLoginStateToFailed());\n    }\n  };\n};","map":{"version":3,"sources":["/Users/rangsanchipphang/Documents/SourceCode/React/cmstock-react-js/src/actions/login.action.js"],"names":["HTTP_LOGIN_FETCHING","HTTP_LOGIN_SUCCESS","HTTP_LOGIN_FAILED","server","OK","httpClient","setLoginStateToFetching","type","setLoginStateToSuccess","payload","setLoginStateToFailed","login","history","credentail","dispatch","result","post","LOGIN_URL","data","rsult","localStorage","setItem","goBack"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,EAAkDC,iBAAlD,EAAoEC,MAApE,EAA2EC,EAA3E,QAAqF,cAArF;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,uBAAuB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEP;AADoC,CAAP,CAAhC;AAIP,OAAO,MAAMQ,sBAAsB,GAAIC,OAAD,KAAc;AAChDF,EAAAA,IAAI,EAAEN,kBAD0C;AAEhDQ,EAAAA;AAFgD,CAAd,CAA/B;AAKP,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCH,EAAAA,IAAI,EAAEL;AADkC,CAAP,CAA9B;AAIP,OAAO,MAAMS,KAAK,GAAG,CAACC,OAAD,EAASC,UAAT,KAAsB;AACvC,SAAO,MAAMC,QAAN,IAAgB;AACnBA,IAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;;AACA,QAAG;AACC,UAAIS,MAAM,GAAE,MAAMV,UAAU,CAACW,IAAX,CAAgBb,MAAM,CAACc,SAAvB,EAAiCJ,UAAjC,CAAlB;;AACA,UAAGE,MAAM,CAACG,IAAP,CAAYC,KAAZ,IAAoBf,EAAvB,EAA0B;AACtB;AACAgB,QAAAA,YAAY,CAACC,OAAb;AACAP,QAAAA,QAAQ,CAACN,sBAAsB,CAACO,MAAM,CAACG,IAAP,CAAYH,MAAb,CAAvB,CAAR;AACAH,QAAAA,OAAO,CAACU,MAAR;AACH,OALD,MAKK;AACD;AACAR,QAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AACH;AACJ,KAXD,CAYA,MAAK;AACDI,MAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AACH;AACJ,GAjBD;AAkBH,CAnBM","sourcesContent":["import { HTTP_LOGIN_FETCHING, HTTP_LOGIN_SUCCESS, HTTP_LOGIN_FAILED,server,OK } from \"../constants\";\nimport { httpClient } from './../utils/HttpClient';\n\nexport const setLoginStateToFetching = () => ({\n    type: HTTP_LOGIN_FETCHING,\n})\n\nexport const setLoginStateToSuccess = (payload) => ({\n    type: HTTP_LOGIN_SUCCESS,\n    payload\n})\n\nexport const setLoginStateToFailed = () => ({\n    type: HTTP_LOGIN_FAILED,\n})\n\nexport const login = (history,credentail)=>{\n    return async dispatch=>{\n        dispatch(setLoginStateToFetching())\n        try{\n            let result =await httpClient.post(server.LOGIN_URL,credentail)\n            if(result.data.rsult ==OK){\n                //success\n                localStorage.setItem()\n                dispatch(setLoginStateToSuccess(result.data.result))\n                history.goBack();\n            }else{\n                //failed\n                dispatch(setLoginStateToFailed())\n            }\n        }\n        catch{\n            dispatch(setLoginStateToFailed())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}