{"ast":null,"code":"import { HTTP_LOGIN_FETCHING, HTTP_LOGIN_SUCCESS, HTTP_LOGIN_FAILED, server, OK, YES } from \"../constants\";\nimport { httpClient } from './../utils/HttpClient';\nexport const setLoginStateToFetching = () => ({\n  type: HTTP_LOGIN_FETCHING\n});\nexport const setLoginStateToSuccess = payload => ({\n  type: HTTP_LOGIN_SUCCESS,\n  payload\n});\nexport const setLoginStateToFailed = () => ({\n  type: HTTP_LOGIN_FAILED\n});\nexport const login = (history, credential) => {\n  return async (dispatch, getState) => {\n    dispatch(setLoginStateToFetching());\n\n    try {\n      let result = await httpClient.post(server.LOGIN_URL, credential);\n\n      if (result.data.result == OK) {\n        //success\n        localStorage.setItem(server.LOGIN_PASSED, YES);\n        getState().ap;\n        history.push(\"/stock\");\n        dispatch(setLoginStateToSuccess(result.data.result));\n      } else {\n        //failed\n        dispatch(setLoginStateToFailed());\n      }\n    } catch {\n      dispatch(setLoginStateToFailed());\n    }\n  };\n};","map":{"version":3,"sources":["/Users/rangsanchipphang/Documents/SourceCode/React/cmstock-react-js/src/actions/login.action.js"],"names":["HTTP_LOGIN_FETCHING","HTTP_LOGIN_SUCCESS","HTTP_LOGIN_FAILED","server","OK","YES","httpClient","setLoginStateToFetching","type","setLoginStateToSuccess","payload","setLoginStateToFailed","login","history","credential","dispatch","getState","result","post","LOGIN_URL","data","localStorage","setItem","LOGIN_PASSED","ap","push"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,EAAkDC,iBAAlD,EAAoEC,MAApE,EAA2EC,EAA3E,EAA+EC,GAA/E,QAA0F,cAA1F;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,OAAO,MAAMC,uBAAuB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAER;AADoC,CAAP,CAAhC;AAIP,OAAO,MAAMS,sBAAsB,GAAIC,OAAD,KAAc;AAChDF,EAAAA,IAAI,EAAEP,kBAD0C;AAEhDS,EAAAA;AAFgD,CAAd,CAA/B;AAKP,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCH,EAAAA,IAAI,EAAEN;AADkC,CAAP,CAA9B;AAIP,OAAO,MAAMU,KAAK,GAAG,CAACC,OAAD,EAASC,UAAT,KAAsB;AACvC,SAAO,OAAOC,QAAP,EAAgBC,QAAhB,KAA2B;AAC9BD,IAAAA,QAAQ,CAACR,uBAAuB,EAAxB,CAAR;;AACA,QAAG;AACC,UAAIU,MAAM,GAAE,MAAMX,UAAU,CAACY,IAAX,CAAgBf,MAAM,CAACgB,SAAvB,EAAiCL,UAAjC,CAAlB;;AACA,UAAGG,MAAM,CAACG,IAAP,CAAYH,MAAZ,IAAqBb,EAAxB,EAA2B;AACvB;AACAiB,QAAAA,YAAY,CAACC,OAAb,CAAqBnB,MAAM,CAACoB,YAA5B,EAAyClB,GAAzC;AAChBW,QAAAA,QAAQ,GAAGQ,EAAX;AACgBX,QAAAA,OAAO,CAACY,IAAR,CAAa,QAAb;AACAV,QAAAA,QAAQ,CAACN,sBAAsB,CAACQ,MAAM,CAACG,IAAP,CAAYH,MAAb,CAAvB,CAAR;AACH,OAND,MAMK;AACD;AACAF,QAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AACH;AACJ,KAZD,CAaA,MAAK;AACDI,MAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AACH;AACJ,GAlBD;AAmBH,CApBM","sourcesContent":["import { HTTP_LOGIN_FETCHING, HTTP_LOGIN_SUCCESS, HTTP_LOGIN_FAILED,server,OK, YES } from \"../constants\";\nimport { httpClient } from './../utils/HttpClient';\n\nexport const setLoginStateToFetching = () => ({\n    type: HTTP_LOGIN_FETCHING,\n})\n\nexport const setLoginStateToSuccess = (payload) => ({\n    type: HTTP_LOGIN_SUCCESS,\n    payload\n})\n\nexport const setLoginStateToFailed = () => ({\n    type: HTTP_LOGIN_FAILED,\n})\n\nexport const login = (history,credential)=>{\n    return async (dispatch,getState)=>{\n        dispatch(setLoginStateToFetching())\n        try{\n            let result =await httpClient.post(server.LOGIN_URL,credential)\n            if(result.data.result ==OK){\n                //success\n                localStorage.setItem(server.LOGIN_PASSED,YES);\ngetState().ap\n                history.push(\"/stock\");\n                dispatch(setLoginStateToSuccess(result.data.result))               \n            }else{\n                //failed\n                dispatch(setLoginStateToFailed())\n            }\n        }\n        catch{\n            dispatch(setLoginStateToFailed())\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}